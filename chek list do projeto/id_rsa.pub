episodio 3 

passo 3 - primeira requisição ao backend

3.1 Instalar Axios
	yarn add axios
3.2Definir BASE_URL
	pasta utils
	arquivo requets.ts -> export const BASE_URL = 'http://localhost:8080';

3.3 Definir tipo SaleSum
	pasta types
	arquivo sale.ts 

export type SaleSum =  {
    sellerName: string,
    sum: number
}

3.4 Definir tipo local ChartData em DonutChart
	dentro do arquivo index.tsx da pasta donuchart(grafico de rosca):

type ChartData = {
    labels: string [];
    series: number [];
}

3.5 Fazer a requisição e tratar os dados
	dentro do arquivo index.tsx da pasta donuchart(grafico de rosca):

 let chartData : ChartData = {labels:[], series: []};

   axios.get(`${BASE_URL}/sales/amount-by-seller`)
   
   .then(response =>{
    const data = response.data as SaleSum[];
    const myLabels = data.map(x => x.sellerName);
    const mySeries = data.map(x => x.sum);

    chartData = {labels:myLabels, series: mySeries};

    console.log(chartData);

   })


passo 4 - intregação com o grafico de rosca(DonutChart): 
	4.1 inserir dentro da pasta DonutChart que está dentro da pasta components ,uso correto atraves do useState e useEffect:


 const [chartData, setChartData] = useState<ChartData>({ labels: [], series: [] });


    useEffect(() => {

        axios.get(`${BASE_URL}/sales/amount-by-seller`)
            .then(response => {
                const data = response.data as SaleSum[];
                const myLabels = data.map(x => x.sellerName);
                const mySeries = data.map(x => x.sum);

                setChartData({ labels: myLabels, series: mySeries });

               

            });

    },[]);	

passo 5 - integração com o grafico de barras (BarChart)

5.1 Definir função auxiliar round:

	5.1.1 criação do arquivo format.ts dentro da pasta utils , digite o seguinte codigo:


export const round = (value: number, precision: number) => {
    var multiplier = Math.pow(10, precision || 0);
    return Math.round(value * multiplier) / multiplier;
}

	

5.2 Definir o tipo taxa de sucesso das vendas(SaleSuccess)
	5.2 dentro do arquivo sale.ts que está dentro da pasta de tipos(types) , digite o seguinte codigo:

export type SaleSuccess = {
    sellerName: string;
    visited: number;
    deals: number;
}


5.3 Definir tipo local ChartData em BarChart

5.3.1 digite o seguinte codigo, dentro do arquivo index.html que está na pasta BarChart dentro da pasta components:

	5.3.1.1 definindo os tipos:


type SeriesDta = {
    name: string;
    data: number[];
}

type ChartData = {
    labels: {
        categories: string[];
    };
    series: SeriesDta[];
}

	5.3.1.2 uso  do useState e useEffect:


 const [chartData, setChartData] = useState<ChartData>({


        labels: {
            categories: []
        },
        series: [
            {
                name: "",
                data: []
            }
        ]
    });



    useEffect(() => {

        axios.get(`${BASE_URL}/sales/amount-by-seller`)
            .then(response => {
                const data = response.data as SaleSuccess[];
                const myLabels = data.map(x => x.sellerName);
                const mySeries = data.map(x => round(100.0 * x.deals / x.visited, 1));

                setChartData({
                    labels: {
                        categories: myLabels
                    },

                    series: [
                        {
                            name: "% Success",
                            data: mySeries

                        }

                    ]
                });

            });

    }, []);

	5.3.1.3 trocamos o mockData pelo chartData:

   return (
        <Chart
            options={{
                ...options, xaxis: chartData.labels
            }}
            series={chartData.series}
            type="bar"
            height="240"

        />

    );


6 integração com a tabela de dados:

6.1 Instalar date-fns ao projeto

6.2 Criar tipos Seller, Sale, SalePage

	6.2.1 criação do arquivo seller.ts dentro da pasta types , digitar o seguinte codigo:

export type Seller = {
    id: number;
    name: string;
}

	6.2.2 criação do tipo Sale dentro do arquivo Sale.ts , dentro da pasta types:


export type Sale =
{
    id: number;
    visited: number;
    deals: number;
    amount: number;
    date: string;
    seller: Seller;
}    
obs. necessario a importação do Seller -> import { Seller } from "./seller";

	6.2.3 criação do tipo SalePage dentro do arquivo sale.ts, dentro da pagina types:

export type SalePage = {
    content: Sale[];
    last: boolean;
    totalPages: number;
    totalElements: number;
    size:number;
    number: number;
    first: boolean;
    numberOfElements: number;
    empty: boolean;
}



6.3 Criar função auxiliar formatLocalDate

	6.3.1 dentro do arquivo format.ts que está dentro da pasta utils , digitar:

export const formatLocalDate = (date: string, pattern: string) => {
    const dt = new Date(date);
    const dtDateOnly = new Date(dt.valueOf() + dt.getTimezoneOffset() * 60 * 1000);
    return format(dtDateOnly, pattern);
}
 obs. necessario importação do format => import{format} from 'date-fns';


6.4 dentro do arquivo index.tsx que está dentro da pasta DataTable , digitar :

 const [page, setPage]= useState<SalePage>({

        first: true,
        last:true,
        number:0,
        totalElements:0,
        totalPages:0
    });
obs. importações necessarias => import { useState } from 'react'; import { SalePage } from "types/sale";



	6.4.1 uso do useEffect

useEffect(() => {

        axios.get(`${BASE_URL}/sales?page=0&size=20&sort=date,desc`)
            .then(response => {
                setPage(response.data);
            });

    },[]);



	6.4.2 alteração no codigo tbody:

  <tbody>
                    {page.content?.map(item => (

                        <tr>
                            <td>{formatLocalDate(item.date, "dd/MM/yyyy")}</td>
                            <td>{item.seller.name}</td>
                            <td>{item.visited}</td>
                            <td>{item.deals}</td>
                            <td>{item.amount}</td>
                        </tr>
                    ))}
                </tbody>




